// 简化的jQuery替代
(function(window) {
    function $(selector) {
        if (typeof selector === 'function') {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', selector);
            } else {
                selector();
            }
            return;
        }
        
        return new JQueryLite(selector);
    }
    
    function JQueryLite(selector) {
        if (typeof selector === 'string') {
            this.elements = document.querySelectorAll(selector);
        } else if (selector.nodeType) {
            this.elements = [selector];
        } else {
            this.elements = [];
        }
        this.length = this.elements.length;
    }
    
    JQueryLite.prototype.ready = function(callback) {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', callback);
        } else {
            callback();
        }
        return this;
    };
    
    JQueryLite.prototype.on = function(event, handler) {
        this.elements.forEach(el => el.addEventListener(event, handler));
        return this;
    };
    
    JQueryLite.prototype.click = function(handler) {
        if (handler) {
            return this.on('click', handler);
        } else {
            this.elements.forEach(el => el.click());
            return this;
        }
    };
    
    JQueryLite.prototype.addClass = function(className) {
        this.elements.forEach(el => el.classList.add(className));
        return this;
    };
    
    JQueryLite.prototype.removeClass = function(className) {
        this.elements.forEach(el => el.classList.remove(className));
        return this;
    };
    
    JQueryLite.prototype.text = function(text) {
        if (text !== undefined) {
            this.elements.forEach(el => el.textContent = text);
            return this;
        } else {
            return this.elements[0] ? this.elements[0].textContent : '';
        }
    };
    
    JQueryLite.prototype.attr = function(name, value) {
        if (value !== undefined) {
            this.elements.forEach(el => el.setAttribute(name, value));
            return this;
        } else {
            return this.elements[0] ? this.elements[0].getAttribute(name) : null;
        }
    };
    
    JQueryLite.prototype.data = function(name) {
        return this.elements[0] ? this.elements[0].dataset[name] : null;
    };
    
    JQueryLite.prototype.each = function(callback) {
        this.elements.forEach((el, index) => callback.call(el, index, el));
        return this;
    };
    
    JQueryLite.prototype.offset = function() {
        if (this.elements[0]) {
            const rect = this.elements[0].getBoundingClientRect();
            return {
                top: rect.top + window.pageYOffset,
                left: rect.left + window.pageXOffset
            };
        }
        return null;
    };
    
    JQueryLite.prototype.animate = function(properties, duration, easing, complete) {
        if (typeof duration === 'string') {
            complete = easing;
            easing = duration;
            duration = 400;
        }
        if (typeof easing === 'function') {
            complete = easing;
            easing = 'ease';
        }
        
        this.elements.forEach(el => {
            if (properties.scrollTop !== undefined) {
                const start = window.pageYOffset || document.documentElement.scrollTop;
                const target = properties.scrollTop;
                const startTime = performance.now();
                
                function scroll(currentTime) {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeProgress = progress < 0.5 ? 2 * progress * progress : -1 + (4 - 2 * progress) * progress;
                    
                    window.scrollTo(0, start + (target - start) * easeProgress);
                    
                    if (progress < 1) {
                        requestAnimationFrame(scroll);
                    } else if (complete) {
                        complete.call(el);
                    }
                }
                requestAnimationFrame(scroll);
            }
        });
        return this;
    };
    
    JQueryLite.prototype.append = function(content) {
        this.elements.forEach(el => {
            if (typeof content === 'string') {
                el.insertAdjacentHTML('beforeend', content);
            } else {
                el.appendChild(content);
            }
        });
        return this;
    };
    
    JQueryLite.prototype.remove = function() {
        this.elements.forEach(el => el.remove());
        return this;
    };
    
    JQueryLite.prototype.length = 0;
    
    // Ajax functionality
    $.ajax = function(options) {
        const xhr = new XMLHttpRequest();
        const method = options.type || options.method || 'GET';
        const url = options.url;
        const data = options.data;
        
        xhr.open(method, url);
        
        if (options.contentType !== false) {
            xhr.setRequestHeader('Content-Type', options.contentType || 'application/x-www-form-urlencoded');
        }
        
        xhr.onload = function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                let response = xhr.responseText;
                try {
                    response = JSON.parse(response);
                } catch (e) {}
                
                if (options.success) {
                    options.success(response, xhr.statusText, xhr);
                }
            } else {
                if (options.error) {
                    options.error(xhr, xhr.statusText, xhr.responseText);
                }
            }
        };
        
        xhr.onerror = function() {
            if (options.error) {
                options.error(xhr, 'error', '');
            }
        };
        
        let sendData = null;
        if (data) {
            if (typeof data === 'object') {
                sendData = new FormData();
                for (let key in data) {
                    sendData.append(key, data[key]);
                }
            } else {
                sendData = data;
            }
        }
        
        xhr.send(sendData);
        return xhr;
    };
    
    // Window scroll function
    $(window).scroll = function(handler) {
        window.addEventListener('scroll', handler);
        return this;
    };
    
    $(window).scrollTop = function() {
        return window.pageYOffset || document.documentElement.scrollTop;
    };
    
    // Body append
    $('body').append = function(content) {
        if (typeof content === 'string') {
            document.body.insertAdjacentHTML('beforeend', content);
        } else {
            document.body.appendChild(content);
        }
        return this;
    };
    
    window.$ = $;
    window.jQuery = $;
})(window); 